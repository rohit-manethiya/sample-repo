<apex:component id="SearchableComboBox">
    <apex:attribute name="optionList" type="SelectOption[]" required="true" description=""/>
    <apex:attribute name="size" type="Integer" default="1" required="false" description=""/>
    <apex:attribute name="multiSelect" type="Boolean" default="false" required="false" description=""/>
    <apex:attribute name="required" type="Boolean" default="false" required="false" description=""/>
    <apex:attribute name="selectedValue" type="String" required="true" description=""/>
    <apex:attribute name="includeNoneOption" type="Boolean" default="true" required="false" description=""/>

    <style>
        .custom-combobox {
            position: relative;
            display: inline-block;
            width: 100%;
        }
        .custom-combobox-toggle {
            position: absolute;
            top: 0;
            bottom: 0;
            margin-left: -1px;
            padding: 0;
        }
        .custom-combobox-input {
            margin: 0;
            padding: 5px 10px;
        }
        .ui-autocomplete {
            max-height: 100px;
            overflow-y: auto;
            overflow-x: hidden;
        }
        .ui-state-default{
            background-color: white;
        }

        .ui-state-highlight, .ui-widget-content .ui-state-highlight, .ui-widget-header .ui-state-highlight {
            border: 1px solid #053787;
            background: #053787;
            color: white;
        }
        .ui-button {
            border: 1px solid #c5c5c5;
            border-top-color: rgb(197, 197, 197);
            border-top-style: solid;
            border-top-width: 1px;
            border-right-color: rgb(197, 197, 197);
            border-right-style: solid;
            border-right-width: 1px;
            border-bottom-color: rgb(197, 197, 197);
            border-bottom-style: solid;
            border-bottom-width: 1px;
            border-image-source: initial;
            border-image-slice: initial;
            border-image-width: initial;
            border-image-outset: initial;
            border-image-repeat: initial;
        }

        .productionOrgConfirmation {
        	padding-top: 1.3em;
        	text-align: center;
        }
        .productionOrgConfirmation table[role="presentation"] {
        	width: auto;
        }
        .productionOrgConfirmation fieldset {
        	margin: auto;
        	display: inline-block;
        }
        .productionOrgConfirmation td {
        	padding: 0 1em 0 1em;
        }
    </style>

    <script>
         function renderCombobox() {
            $copado.widget( "custom.combobox", {
              _create: function() {
                this.wrapper = $copado( "<span>" )
                  .addClass( "custom-combobox" )
                  .insertAfter( this.element );

                this.element.hide();
                this._createAutocomplete();
                this._createShowAllButton();
              },

              _createAutocomplete: function() {
                var selected = this.element.children( ":selected" ),
                value = selected.val() ? selected.text() : "";

                this.input = $copado( "<input>" )
                  .appendTo( this.wrapper )
                  .val( value )
                  .attr( "title", "" )
                  .attr( "id", "autoCompInp" )
                  .attr( "required", "true" )
                  .addClass( "custom-combobox-input ui-widget ui-widget-content ui-state-default ui-corner-left" )
                  .autocomplete({
                    delay: 0,
                    minLength: 0,
                    source: $copado.proxy( this, "_source" )
                  })
                  .tooltip({
                    classes: {
                      "ui-tooltip": "ui-state-highlight"
                    }
                  });

                this._on( this.input, {
                  autocompleteselect: function( event, ui ) {
                    ui.item.option.selected = true;
                    this._trigger( "select", event, {
                      item: ui.item.option
                    });
                    lockScreen();
                    assignOnSelect(ui.item.option.value);
                  },

                  autocompletechange: "_removeIfInvalid"
                });
              },

              _createShowAllButton: function() {
                var input = this.input,
                  wasOpen = false;

                $copado( "<a>" )
                  .attr( "tabIndex", -1 )
                  .attr( "title", "Show All Items" )
                  .tooltip()
                  .appendTo( this.wrapper )
                  .button({
                    icons: {
                      primary: "ui-icon-triangle-1-s"
                    },
                    text: false
                  })
                  .removeClass( "ui-corner-all" )
                  .addClass( "custom-combobox-toggle ui-corner-right" )
                  .on( "mousedown", function() {
                    wasOpen = input.autocomplete( "widget" ).is( ":visible" );
                  })
                  .on( "click", function() {
                    input.trigger( "focus" );

                    if ( wasOpen ) {
                      return;
                    }

                    input.autocomplete( "search", "" );
                  });
              },

              _source: function( request, response ) {
                var matcher = new RegExp( $copado.ui.autocomplete.escapeRegex(request.term), "i" );
                response( this.element.children( "option" ).map(function() {
                  var text = $copado( this ).text();
                  if ( this.value && ( !request.term || matcher.test(text) ) )
                    return {
                      label: text,
                      value: text,
                      option: this
                    };
                }) );
              },

              _removeIfInvalid: function( event, ui ) {
                if ( ui.item ) {
                  return;
                }

                var value = this.input.val(),
                  valueLowerCase = value.toLowerCase(),
                  valid = false;
                this.element.children( "option" ).each(function() {
                  if ( $copado( this ).text().toLowerCase() === valueLowerCase ) {
                    this.selected = valid = true;
                    return false;
                  }
                });

                if ( valid ) {
                  return;
                }

                this.input
                this._delay(function() {
                  this.input.tooltip( "close" ).attr( "title", "" );
                }, 2500 );
                this.input.autocomplete( "instance" ).term = "";
                lockScreen();
                assignOnSelect(value);
              },

              _destroy: function() {
                this.wrapper.remove();
                this.element.show();
              }
            });

            $copado( "#combobox" ).combobox();
            $copado( "#toggle" ).on( "click", function() {
            $copado( "#combobox" ).toggle();
            });
         }

         renderCombobox();
    </script>

    <apex:selectList value="{!selectedValue}" styleClass="slds-input"
                     size="{!size}" multiSelect="{!multiSelect}" required="{!required}">
        <apex:selectOption itemValue="" itemLabel="{!$Label.NONE_SELECTED}" rendered="{!includeNoneOption}"/>
        <apex:selectOptions value="{!optionList}"/>
    </apex:selectList>
</apex:component>